PYTHON DATASTRUCTURES BASICS:

STRINGS:
data = 'hello'
data[0] #Output: h #return first element #index starts with 0
data[1:4] #Output: ell #return element starting from index 1 and ending with index 3 (n-1=4-1 in this case)
data[-1] #Output: o #return last element
data[:-1] #Output: hell #return all elements except last element
data[::-1] #Output: olleh #reverse
len(data) #Output: 5 #Returns the length of the string
list(data) #Output:['h', 'e', 'l', 'l', 'o'] #Converts string into list

INT:


LIST:
data = ['a', 'b', 'c']
numbers = [2, 5, 4]
urls = [
'www.ncs.com',
'www.wikipedia.com'
]
data2 = [[0, 1], ['a', 'b'], [4, 5]] #also be called as matrix
zeroes = [0] * 100 #Output: [0, 0, 0, 0,..........0] #a list of 100 zeroes#Output: 
data + zeroes #Output: ['a', 'b', 'c', 0, 0, 0, 0, 0,.......0] #Combines two lists data and zeroes
list("Hello world") #Output: ['H', 'e', 'l', 'l', 'o', ' ', 'w', 'o', 'r', 'l', 'd'] #Returns the string in list format
len(data) #Output: 3 #Returns the length of the list data
data[0] #Output: a #Returns first item in the list data #index starts with 0 #This is similar to strings
data[-1] #Output: c #Returns last item in the list data #This is similar to strings
data[::-1] #Output: ['c', 'b', 'a'] #reverse #similar to strings
data[0] = "A" #Output: ['A', 'b', 'c', 'd'] #Assigns new value to the first item in the list data
data[0:3] #same as data[:3] #Output: ['A', 'b', 'c'] #Returns elements of list data starting from index 0 to 2 (3 not included)
data[0:] #same as data[:] #output: ['A', 'b', 'c', 'd'] #Returns all elements starting from 0 till end of the list
max(numbers) #Output: 5 #Returns the largest/maximum number in the list
min(numbers) #Output: 2 #Returns the smalles/minimum number in the list
data[::2] #Output: ['a', 'c'] #Prints every other element in the list data #For example data = list(range(10)) and data[::2] #Output: [0, 2, 4, 6, 8] #Prints even numbers
first, second, third = data #Output: first = 'a' second = 'b' and third = 'c' #This is called List unpacking and note that numbers of variables on the left must be equla to the length of the list data
first, *other = data #Output: first = 'a' and other = ['b', 'c'] # you need to print(first) and print(other) # *other assigns the remaining values in the list to other variable
print([*data, 'o', *numbers, '_']) #Output: ['a', 'b', 'c', 'o', 2, 5, 4, '_']
print(*data) #Output: a b c #Here * is unpacking operator similar to dictionaries. in the below
list(range(6)) #Output: [0, 1, 2, 3, 4, 5] #Returns numbers from 0 to 5 (last number 6 not included)
for i in data: print(i) #Output: a b c (each will be printed in next line. add end='' if need to print in same line)
for i in enumerate(data): print(i) #Output: (0, 'a') \n (1, 'b') \n (2, 'c') #\n is next line #prints a tuple for each value in next line where first element is the index and second is the element itself. Here (0, 'a'), 0 is the index of a
for index, letter in enumerate(data): print(index, letter) #Output 0 a \n 1 b \n 2 c #\n is next line
data.append("d") #Output: ['a', 'b', 'c', 'd'] #Append an item at the end of the list data
data.pop() #Output: 'c' #Remove the last item in the list data
data.pop(0) #Output: 'a' #Remove the item with index 0 or first item in the list data
data.remove("b") and print(data) #Output: ['a', 'c'] #Remove the item 'b' in the list data #Note: just data.remove('b') wont print or output anything. You need to print to get the new state of the list data
del data[0:3] #Output: [] #Remove all items from 0 to 2 (except the 3 #the last item) #del will delete range of items in the list
data.clear() #Output: [] #Deletes all the item in the list
data.index("a") #Output: 0 #Returns the index of the item 'a' in the list data
data.count("a") #Output: 1 #Returns the number of occurences of the item 'a' in the list data
data.insert(1, 'e') #Output: ['a', 'e', 'b', 'c'] #Insert item 'e' at index 1 in list data
numbers.sort() #Same as sorted(numbers) #Output: [2, 4, 5] #Sorts the list numbers
numbers.sort(reverse=True) #same as sorted(numbers, reveres=True) #Output: [5, 4, 2] #Sorts in revers order
list(map(int, numbers)) #Output: converts list of string numbers to integers #Note: Just using map(int, numbers) outputs only the map object.
list(map(lambda item: item > 2, numbers)) #Output: [False, True, True] #Returns a list where each element corresponds to if item is greater than 2 (True) and False otherwise
data = [item for item in range(5)] #Output: [0, 1, 2, 3, 4] #This is list comprehension
list(zip(data, numbers)) #Output: [('a', 2), ('b', 5), ('c', 4)] #Note: Just using zip(data, numbers) outputs only the zip object.
list(zip("xyz", numbers)) #Output: [('x', 2), ('y', 5), ('z', 4)] #Note: Just using zip(data, numbers) outputs only the zip object.
data = deque(['a', 'b', 'c']) and data.popleft() #Output: ['b', 'c'] #Removes the first item in the list #Note: A normal list doesnt have popleft() function. Its only available in deque function #from collections import deque
urls.lstrip("www.") #Output: ncs.com \n ikipedia.com #\n is next line #Run it in for loop like [i.lstrip("www.") for i in urls]
urls.removeprefix("www.") #Output: ncs.com \n wikipedia.com #\n is next line #Run it in for loop like [i.removeprefix("www.") for i in urls]

TUPLE:
Is a read only list
data = (1, 2, 3, 4)
x = 1
y = 2
data = () #empty tuple
data = 1, #still a tuple
data = (1, 2) + (3, 4) #Output: (1, 2, 3, 4)
data[0:2] #Output: 1, 2 #Similar to list. Here, 0 is the first index and 1 is the last index not 2.
len(data) #Output: 4 #Returns the length of the array data
tuple(listname) #Converts list or string or set into tuple
x, y, z = data #Output: x=1 y=2 z=3
x, y = y, x #Output: x = 2 \n y = 1
numbers = (x for x in range(4)) #Output: (0, 1, 2, 3) #Returns a tuple of range 4. Note that this is a generator expression similar to list comprehension or dictionary comprehension. Major difference is the memory. List occupies huge memory for storing large
data sets but tuple or generators do not. But, len(numbers) will give error as the items are not stored

ARRAYS:
Use only when you have large set of items and to avoid performance problems
from array import array
data = array("i", [1, 2, 3]) #Array declaration. Here i is the typcode. check for python 3 type code documentation. It means that data is an integer array
data[0] #Output: 1 #returns first item in the array data
data[-1] #Output: 4 #Returns last item in the array data
data[0:2] #Output: 1, 2 #Returns items starting with index 0 and ending with index 1 (not 2)
len(data) #Output: 3 #Returns the length of the array data
data.append(4) #Output: 1, 2, 3, 4 #Appends 4 to the end of the array
data.insert(1, 5) #Output: 1, 5, 2, 3, 4 #Insert integer 5 at index 1 in array data
data.pop(2) #Output: 1, 3, 4 #Remove integer 2 from the array data
data.remove(3) #Output: 1, 3 #Remove integer 3 from the array data 


DICTIONARY:
Collection of key, value pairs
Declaration:
data = dict() #Empty dictionary
data = {"x": 1, "y": 2} #Is same as data = dict(x=1, y=2)
numbers = {"v": 3, "u": 4}
data["x"] #Output: 1 #Returns the value of the key x #data[key]
data["x"] = 10 #Output: {'x': 10, 'y': 2} #Assigns the value 10 to x
data["z"] = 15 #Output: {'x': 10, 'y': 2, 'z': 15} #Adds new value z = 15
data.get("x") #Output: 1 #Returns the value of key x
data.get("u", 0) #Output: 0 #Returns the default value assigned that 0 for u if the key "u" doesnt exists
del data["x"] #Output: {'y': 2} #Deletes the item containing key x
for key, value in data.items(): print(key, value) #Output: x 1 \n y 2 #\n is next line
data = {x: x *2 for x in range(3)} #Output: {0: 0, 1: 2, 2: 4} #dictionary comprehension similar to list comprehensions
print({**data, "e": 11, **numbers, "f": 23) #Output: {"x": 1, "y": 2, "e": 11, "v": 3, "u": 4, "f": 23}
print(*data.keys())  #Output: x y #prints all keys
print(*data.values()) #Output: 1 2 #prints all values
print(max(*numbers.values())) #Output: 4 #Returns the largest/maximum value from the keys of numbers dictionary. Can be used against keys also. But, must be an integers. Example: if numbers = {1: 'a', 3: 'b'} then print(max(*numbers.keys())) #Output: 3
print(min(*numbers.values())) #Output: 3 #Returns the smallest/minimum value from the keys of numbers dictionary. Can be used against keys also. But, must be an integers. Example: if numbers = {1: 'a', 3: 'b'} then print(min(*numbers.keys())) #Output: 1

SETS:
Sets in Python are unordered collection of unique elements.
Note: Items in the set cannot be accessed using the index as they are unordered collection of unique elements
Declared as :
order = set()
NOTE: Defining sets as order = {} will treat order as dictionary not set
Example:
set1 = {1, 2, 3}
set2 = {3, 4, 5}
set(data) #Converts a list into set . Here data is a list. But, this new set will contain only the unique elements as set in python are unordered collection of unique elements
set1.add(6) #Output: Adds 6 into the set1. Can be added at any index. Need not be at the last index only.
set1.remove(2) #Output: {1, 3} #Removes 2 from the set1 
len(set1) #Output: 3 #Returns the length of the set set1
set(listname) #Converts list or string or tuple into set
print(set1 | set2)  # Output: {1, 2, 3, 4, 5} # Union
print(set1 & set2)  # Output: {3} # Intersection
print(set1 - set2)  # Output: {1, 2} # Difference
print(set1 ^ set2)  # Output: {1, 2, 4, 5} #All elements of both sets except the common elements for both sets # Symmetric Difference

#Adding elements
set1.add(7)
print(set1) #Output: {1, 2, 3, 7}

Operators	Notes
key in s	            containment check
key not in s	        non-containment check
s1 == s2	            s1 is equivalent to s2
s1 != s2	            s1 is not equivalent to s2
s1 <= s2	            s1 is subset of s2
s1 < s2	              s1 is proper subset of s2
s1 >= s2	            s1 is superset of s2
s1 > s2	              s1 is proper superset of s2
s1 | s2	              the union of s1 and s2
s1 & s2	              the intersection of s1 and s2
s1 – s2	              the set of elements in s1 but not s2
s1 ˆ s2	              the set of elements in precisely one of s1 or s2

# typecasting list to set
myset = set(["a", "b", "c"])
print(myset)

# Adding element to the set
myset.add("d")
print(myset)

Output:
Python set is an unordered datatype, which means we cannot know in which order the elements of the set are stored.
{'c', 'b', 'a'}
{'d', 'c', 'b', 'a'}
